import sqlite3
from cryptography.fernet import Fernet
import tkinter as tk
from tkinter import messagebox
import bcrypt
import pyotp

def setup_database():
    conn = sqlite3.connect('password_manager.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT UNIQUE,
            password_hash TEXT,
            secret_key TEXT
        )
    ''')
    conn.commit()
    conn.close()

def register_user(username, password):
    conn = sqlite3.connect('password_manager.db')
    cursor = conn.cursor()
    password_hash = bcrypt.hashpw(password.encode(), bcrypt.gensalt())
    secret_key = pyotp.random_base32()
    cursor.execute('INSERT INTO users (username, password_hash, secret_key) VALUES (?, ?, ?)',
                   (username, password_hash, secret_key))
    conn.commit()
    conn.close()

def login_user(username, password, totp):
    conn = sqlite3.connect('password_manager.db')
    cursor = conn.cursor()
    cursor.execute('SELECT password_hash, secret_key FROM users WHERE username = ?', (username,))
    user = cursor.fetchone()
    conn.close()
    if user and bcrypt.checkpw(password.encode(), user[0]) and pyotp.TOTP(user[1]).verify(totp):
        return True
    return False

def encrypt_password(password, key):
    cipher_suite = Fernet(key)
    return cipher_suite.encrypt(password.encode())

def decrypt_password(encrypted_password, key):
    cipher_suite = Fernet(key)
    return cipher_suite.decrypt(encrypted_password).decode()

def create_ui():
    root = tk.Tk()
    root.title("Secure Password Manager")

    def register():
        username = username_entry.get()
        password = password_entry.get()
        totp = totp_entry.get()
        register_user(username, password)
        messagebox.showinfo("Success", "User registered successfully!")

    def login():
        username = username_entry.get()
        password = password_entry.get()
        totp = totp_entry.get()
        if login_user(username, password, totp):
            messagebox.showinfo("Success", "Login successful!")
        else:
            messagebox.showerror("Error", "Invalid credentials or TOTP code.")

    username_label = tk.Label(root, text="Username:")
    username_label.pack()
    username_entry = tk.Entry(root)
    username_entry.pack()

    password_label = tk.Label(root, text="Password:")
    password_label.pack()
    password_entry = tk.Entry(root, show='*')
    password_entry.pack()

    totp_label = tk.Label(root, text="TOTP Code:")
    totp_label.pack()
    totp_entry = tk.Entry(root)
    totp_entry.pack()

    register_button = tk.Button(root, text="Register", command=register)
    register_button.pack()

    login_button = tk.Button(root, text="Login", command=login)
    login_button.pack()

    root.mainloop()

if _name_ == "_main_":
    setup_database()
    create_ui()
